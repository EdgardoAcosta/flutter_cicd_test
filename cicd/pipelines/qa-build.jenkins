#!/usr/bin/env groovy
def nodeLabel = "jenkins-slave-${UUID.randomUUID().toString()}"
pipeline {

  environment {
    POD_NAME = "jenkins-slave-${UUID.randomUUID().toString()}"
    SLACK_USER_ID = slackUserIdFromEmail "${ghprbActualCommitAuthorEmail}"
    SLACK_THREAD = ""
    PROJECT_NAME = "${scm.getUserRemoteConfigs()[0].getUrl().tokenize('/').last().split("\\.")[0]}"
  }
  agent {
    kubernetes {
      inheritFrom nodeLabel
      defaultContainer 'jnlp'
      yaml """
        apiVersion: v1
        kind: Pod
        metadata:
        labels:
          app: pipeline-job
        spec:
          containers:
          - name: flutter
            image: 337583525037.dkr.ecr.us-west-2.amazonaws.com/docker-flutter:latest
            command:
            - cat
            tty: true
      """
    }
  }
  stages {
       stage('Install Dependencies') {
        steps{
          slackSend message: "QA build for project ${env.PROJECT_NAME} in branch ${env.branch}"
          container('flutter'){
            sh 'flutter doctor'
            sh 'flutter --version'
            sh 'export PATH="$PATH":"$HOME/.pub-cache/bin"'
            sh 'dart pub global activate junitreport'
            sh 'flutter pub get'
          }
        }
    }
    stage('Test') {
      steps{
         container('flutter'){
            sh 'flutter test --reporter json > test_result.jsonl'
            sh 'dart pub global run junitreport:tojunit --input test_result.jsonl --output test-results.xml'
            junit 'test-results.xml'
          }
      }
    }
    stage('BUILD') {
      steps{
         container('flutter'){
            sh 'flutter build apk'
          }
      }
    }
    stage('UPLOAD') {
      environment {
        S3_FILE_NAME = 'app-release'
        S3_BUCKET = 'ef-test-bucket'
        S3_BUCKET_ZONE = 'us-west-1'
        S3_SAVE_PATH = ""
        S3_BUCKET_URL = ""
        S3LIST = ""
      }
      steps{ 
        withAWS(credentials: 'aws-cli-credentials', region: 'us-west-1') {
          container('flutter'){
            sh 'ls'
            s3Upload bucket: S3_BUCKET,file:"./build/app/outputs/flutter-apk/${S3_FILE_NAME}.apk", acl: 'PublicRead' , pathStyleAccessEnabled: true, payloadSigningEnabled: true
            script {
              S3LIST = s3FindFiles bucket: S3_BUCKET,  glob: "**", onlyFiles: true
              echo "${S3LIST}"
            }
             slackSend message: "APK generated for ${env.PROJECT_NAME} in branch ${env.branch}, download: at \n - <https://${env.S3_BUCKET}.${env.S3_BUCKET_ZONE}/${env.S3_FILE_NAME}.apk| Andoid apk>  <https://${env.S3_BUCKET}.${env.S3_BUCKET_ZONE}/${env.S3_FILE_NAME}.ipa| IOS ipa>"
          
            // echo "list " + env.S3LIST
          }
        }
      }
    }
  }  
  post {
    failure {
        echo 'failure'
    }
    success {
        echo 'success'
    }
    unstable {
        echo 'unstable'
    }
  }
    
}